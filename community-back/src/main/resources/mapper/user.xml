<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.korit.communityback.domain.user.UserMapper">

    <resultMap id="UserMap" type="com.korit.communityback.domain.user.User">
        <id property="userId" column="user_id" />
        <result property="username" column="username" />
        <result property="password" column="password" />
        <result property="fullName" column="full_name" />
        <result property="email" column="email" />
        <result property="profileImgPath" column="profile_img_path" />
        <result property="provider" column="provider" />
        <result property="providerId" column="provider_id" />
        <collection property="userRoles" javaType="list" resultMap="UserRoleMap" />
    </resultMap>
    <resultMap id="UserRoleMap" type="com.korit.communityback.domain.userRole.UserRole">
        <id property="userRoleId" column="user_role_id" />
        <result property="userId" column="urt_user_id" />
        <result property="roleId" column="urt_role_id" />
        <association property="role" resultMap="RoleMap" />
    </resultMap>
    <resultMap id="RoleMap" type="com.korit.communityback.domain.role.Role">
        <id property="roleId" column="role_id" />
        <result property="roleName" column="role_name" />
    </resultMap>

    <insert id="insert" useGeneratedKeys="true" keyProperty="userId">

        insert into user_tb
        values (default, #{username}, #{password}, #{fullName}, #{email}, #{profileImgPath}, #{provider}, #{providerId})

    </insert>
    <update id="updateProfileImgPathById">
        update
            user_tb
        set
            profile_img_path = #{path}
        where
            user_id = #{userId}
    </update>
    <update id="update">
        update user_tb
        set
            <if test="fullName  != null">
                full_name = #{fullName},
            </if>
            <if test="email  != null">
                email = #{email},
            </if>
            <if test="profileImgPath  != null">
                profile_img_path = #{profileImgPath},
            </if>
            username = username
        where
            user_id = #{userId}

    </update>
    <delete id="deleteByIds">
        delete
        from
            user_tb
        where
            user_id in <foreach item="userId" collection="userIds" open="(" close=")"  separator=",">#{userId}</foreach>
    </delete>

    <select id="findByUsername" resultMap="UserMap">
        select
            ut.user_id,
            ut.username,
            ut.password,
            ut.full_name,
            ut.email,
            ut.profile_img_path,
            ut.provider,
            ut.provider_id,

            urt.user_role_id,
            urt.user_id as urt_user_id,
            urt.role_id as urt_role_id,

            rt.role_id,
            rt.role_name
        from
            user_tb ut
            left outer join user_role_tb urt on(urt.user_id = ut.user_id)
            left outer join role_tb rt on(rt.role_id = urt.role_id)
        where
            ut.username = #{username}
    </select>

    <select id="findById" resultMap="UserMap">
        select
            ut.user_id,
            ut.username,
            ut.password,
            ut.full_name,
            ut.email,
            ut.profile_img_path,
            ut.provider,
            ut.provider_id,

            urt.user_role_id,
            urt.user_id as urt_user_id,
            urt.role_id as urt_role_id,

            rt.role_id,
            rt.role_name
        from
            user_tb ut
            left outer join user_role_tb urt on(urt.user_id = ut.user_id)
            left outer join role_tb rt on(rt.role_id = urt.role_id)
        where
            ut.user_id = #{userId}

    </select>

    <select id="findAllBySearchOption" resultType="com.korit.communityback.domain.user.User">
        select
            ut.user_id,
            ut.username,
            ut.password,
            ut.full_name,
            ut.email,
            ut.profile_img_path,
            ut.provider,
            ut.provider_id,

            group_concat(rt.role_name) as roleNames
        from
            user_tb ut
            left outer join user_role_tb urt on(urt.user_id = ut.user_id)
            left outer join role_tb rt on(rt.role_id = urt.role_id)
        where
            ut.username like concat ('%', #{searchText}, '%')
            or ut.full_name like concat ('%', #{searchText}, '%')
            or ut.email like concat ('%', #{searchText}, '%')
        group by
            ut.user_id,
            ut.username,
            ut.password,
            ut.full_name,
            ut.email,
            ut.profile_img_path,
            ut.provider,
            ut.provider_id
        order by
            ut.user_id
        limit #{startIndex}, #{size}
    </select>

    <select id="getCountOfOptions" resultType="java.lang.Integer">
        select
            count(*)
        from
            user_tb
        where
            username like concat ('%', #{searchText}, '%')
            or full_name like concat ('%', #{searchText}, '%')
            or email like concat ('%', #{searchText}, '%')
    </select>

    <!-- 내가 팔로잉 중인 유저 -->
    <select id="findFollowingUsers" resultMap="UserMap" parameterType="int">
        select
            ut.user_id,
            ut.username,
            ut.password,
            ut.full_name,
            ut.email,
            ut.profile_img_path,
            ut.provider,
            ut.provider_id,

            urt.user_role_id,
            urt.user_id AS urt_user_id,
            urt.role_id AS urt_role_id,

            rt.role_id,
            rt.role_name
        from
            user_tb ut
            left join follow_tb f ON ut.user_id = f.following_id
            left outer join user_role_tb urt ON urt.user_id = ut.user_id
            left outer join role_tb rt ON rt.role_id = urt.role_id
        where
            f.follower_id = #{userId}
    </select>

    <!-- 추천 유저 (팔로우하지 않은 유저) -->
    <select id="findRecommendedUsers" resultMap="UserMap" parameterType="int">
        select
            ut.user_id,
            ut.username,
            ut.password,
            ut.full_name,
            ut.email,
            ut.profile_img_path,
            ut.provider,
            ut.provider_id,

            urt.user_role_id,
            urt.user_id AS urt_user_id,
            urt.role_id AS urt_role_id,

            rt.role_id,
            rt.role_name
        from
            user_tb ut
            left outer join user_role_tb urt ON urt.user_id = ut.user_id
            left outer join role_tb rt ON rt.role_id = urt.role_id
        where
            ut.user_id NOT IN (
            SELECT following_id
            FROM follow_tb
            WHERE follower_id = #{userId}
        )
    </select>
</mapper>